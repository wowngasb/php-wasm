# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build PHP WASM
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: soyuka/php-wasm:latest
          cache-from: type=registry,ref=soyuka/php-wasm:latest
          cache-to: type=inline
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Build website
        working-directory: demo
        run: |
          docker create --name=php-wasm docker.io/soyuka/php-wasm:latest
          mkdir -p public/ dist/
          docker cp php-wasm:/build/php-web.mjs ./dist
          docker cp php-wasm:/build/php-web.wasm ./public
          docker run -v $(pwd)/src:/src -v $(pwd)/public:/public -v $(pwd)/dist:/dist docker.io/soyuka/php-wasm:latest python3 /emsdk/upstream/emscripten/tools/file_packager.py /public/php-web.data --use-preload-cache --lz4 --preload "/src" --js-output=/dist/php-web.data.js --no-node --exclude '*/.*' --export-name=createPhpModule
          sed '/--pre-js/r dist/php-web.data.js' dist/php-web.mjs > public/php-web.mjs
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: 'demo/public'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
